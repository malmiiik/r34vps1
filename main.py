from keep_alive import keep_alive
import os
import sqlite3
import aiohttp
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ URL API
TOKEN = os.getenv("TELEGRAM_TOKEN")
RULE34_API_URL = "https://api.rule34.xxx/index.php?page=dapi&s=post&q=index&json=1"

# –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
post_cache = []
current_post_index = 0
favorites_cache = []
favorite_index = 0

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def get_db_connection(user_id):
    db_file = f"favorites_{user_id}.db"
    return sqlite3.connect(db_file)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
def create_favorites_table(user_id):
    with get_db_connection(user_id) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS favorites (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_url TEXT NOT NULL,
                tags TEXT
            )
        ''')
        conn.commit()

# –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def get_navigation_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='previous_post'),
         InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data='next_post')],
        [InlineKeyboardButton("üéÅ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='add_to_favorites')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéâ", callback_data='main_menu')]
    ])

def get_favorites_navigation_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='previous_favorite'),
         InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data='next_favorite')],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data='remove_from_favorites')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéâ", callback_data='main_menu')]
    ])

def get_main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéÑ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç üéâ", callback_data='random_post')],
        [InlineKeyboardButton("üéÅ –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É üéÖ", callback_data='search_by_tag')],
        [InlineKeyboardButton("‚ùÑÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠ê", callback_data='view_favorites')],
        [InlineKeyboardButton("üéÜ –û –±–æ—Ç–µ üß£", callback_data='about_bot')],
        [InlineKeyboardButton("üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ üéä", callback_data='user_agreement')]
    ])

# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è MarkdownV2
def escape_markdown_v2(text):
    escape_chars = ['\\', '`', '*', '_', '{', '}', '[', ']', '(', ')', '#', '+', '-', '.', '!', ' ']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
def get_file_extension(url):
    return os.path.splitext(url)[1][1:].upper()  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ—Å—Ç–æ–º
async def update_post_message(update: Update, post, tags, buttons):
    post_url = post['file_url']
    file_extension = get_file_extension(post_url)
    tags_text = ", ".join(tags).replace(",", " ") if isinstance(tags, list) else tags.replace(",", " ")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ–¥–Ω—é—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ —Ç–µ–∫—Å—Ç
    message_text = f"üéÑ‚ú® {escape_markdown_v2(tags_text)} ‚ú®üéÑ\n\n[üéÅ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç]({post_url})\n*–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}*"
    
    await update.effective_message.edit_text(message_text, reply_markup=buttons, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=False)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –∫–∞–∫ —Å—Å—ã–ª–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_favorites_table(user_id)

    await update.message.reply_text(
        "üéÑ‚ùÑÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –Ω–∞ Rule34. ‚ùÑÔ∏èüéÑ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π:\n"
        "1. üéÑ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç üéâ\n"
        "2. üéÅ –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É üéÖ\n"
        "3. ‚ùÑÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠ê\n",
        reply_markup=get_main_menu()
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API Rule34
async def fetch_posts(session, params=None):
    async with session.get(RULE34_API_URL, params=params) as response:
        response.raise_for_status()
        return await response.json() if response.status == 200 else None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
async def random_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    loading_message = await update.effective_message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    async with aiohttp.ClientSession() as session:
        posts = await fetch_posts(session)
        await loading_message.delete()
        if posts:
            global post_cache, current_post_index
            post_cache = posts
            random.shuffle(post_cache)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
            current_post_index = 0
            post_tags = post_cache[current_post_index].get("tags", "–°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç").replace(",", " ").split()  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º
            post_url = post_cache[current_post_index]['file_url']
            message_text = f"üéÑ‚ú® {escape_markdown_v2(' '.join(post_tags))} ‚ú®üéÑ\n\n[üéÅ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç]({post_url})"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º update_post_message –≤–º–µ—Å—Ç–æ send_large_file_link
            await update_post_message(update, post_cache[current_post_index], post_tags, get_navigation_buttons())
        else:
            await update.effective_message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç.", reply_markup=get_main_menu())


async def handle_tag_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        user_input = update.message.text
        if not user_input:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=get_main_menu())
            return

        tags = [tag.strip() for tag in user_input.replace(",", " ").split()]  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
        params = {'tags': ' '.join(tags)}  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏

        loading_message = await update.effective_message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

        try:
            async with aiohttp.ClientSession() as session:
                posts = await fetch_posts(session, params)
        except Exception as e:
            await loading_message.delete()
            await update.effective_message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å—Ç–æ–≤: {str(e)}", reply_markup=get_main_menu())
            return

        await loading_message.delete()

        if posts:
            global post_cache, current_post_index
            post_cache = posts
            random.shuffle(post_cache)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
            current_post_index = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
            post_tags = post_cache[current_post_index].get("tags", "–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º").replace(",", " ").split()  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º
            post_url = post_cache[current_post_index]['file_url']
            message_text = f"‚ú® {escape_markdown_v2(' '.join(post_tags))} \\‚ú®\n\n[–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç]({post_url})"

            # –í–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.effective_message.reply_text(
                message_text, 
                reply_markup=get_navigation_buttons(), 
                parse_mode=ParseMode.MARKDOWN_V2, 
                disable_web_page_preview=False
            )
        else:
            await update.effective_message.reply_text("‚ùå –ü–æ—Å—Ç—ã —Å —Ç–∞–∫–∏–º–∏ —Ç–µ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data == 'random_post':
        await random_post(update, context)
    elif data == 'search_by_tag':
        await query.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    elif data == 'view_favorites':
        await view_favorites(update, context)
    elif data == 'previous_post':
        await previous_post(update)
    elif data == 'next_post':
        await next_post(update)
    elif data == 'previous_favorite':
        await previous_favorite(update, context)  # –ü–µ—Ä–µ–¥–∞–µ–º context
    elif data == 'next_favorite':
        await next_favorite(update, context)  # –ü–µ—Ä–µ–¥–∞–µ–º context
    elif data == 'add_to_favorites':
        await add_to_favorites(update, context)
    elif data == 'remove_from_favorites':
        await remove_from_favorites(update, context)
    elif data == 'about_bot':
        await about_bot(update, context)
    elif data == 'user_agreement':
        await user_agreement(update, context)
    elif data == 'main_menu':
        await query.message.edit_text(
            "üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ Rule34.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π:\n"
            "1. üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç\n"
            "2. üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É\n"
            "3. ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\n",
            reply_markup=get_main_menu()
        )

# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å—Ç—É
async def next_post(update: Update):
    global current_post_index
    if post_cache:
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å—Ç—É –≤ —Å–ø–∏—Å–∫–µ
        next_index = current_post_index + 1
        if next_index < len(post_cache):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç
            current_post_index = next_index
            post = post_cache[current_post_index]
            post_tags = post.get("tags", "").replace(",", " ").split()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –ø–æ—Å—Ç–∞
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = f"‚ú® {escape_markdown_v2(' '.join(post_tags))} \\‚ú®\n\n[–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç]({post['file_url']})"
            await update_post_message(update, post, post_tags, get_navigation_buttons())  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ—Å—Ç–æ–º
        else:
            await update.callback_query.answer("‚ùå –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç.")
    else:
        await update.callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")

# –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ—Å—Ç—É
async def previous_post(update: Update):
    global current_post_index
    if post_cache:
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ—Å—Ç—É –≤ —Å–ø–∏—Å–∫–µ
        prev_index = current_post_index - 1
        if prev_index >= 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç
            current_post_index = prev_index
            post = post_cache[current_post_index]
            post_tags = post.get("tags", "").replace(",", " ").split()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –ø–æ—Å—Ç–∞
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = f"‚ú® {escape_markdown_v2(' '.join(post_tags))} \\‚ú®\n\n[–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç]({post['file_url']})"
            await update_post_message(update, post, post_tags, get_navigation_buttons())  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ—Å—Ç–æ–º
        else:
            await update.callback_query.answer("‚ùå –≠—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç.")
    else:
        await update.callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
async def view_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global favorites_cache, favorite_index
    user_id = update.effective_user.id
    with get_db_connection(user_id) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT file_url, tags FROM favorites")
        favorites_cache = cursor.fetchall()
    if favorites_cache:
        favorite_index = 0
        await show_favorite(update)
    else:
        await update.callback_query.answer("‚ùå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ.")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
async def show_favorite(update: Update):
    if favorites_cache:
        post_url, post_tags = favorites_cache[favorite_index]
        
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –≤ —Ç–µ–≥–∞—Ö –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        post_tags = post_tags.replace(",", " ").strip()
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ MarkdownV2
        escaped_tags = escape_markdown_v2(post_tags)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º –∏ –µ–≥–æ —Ç–µ–≥–∞–º–∏
        message_text = f"‚ú® {escaped_tags} \\‚ú®\n\n[–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç]({post_url})"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º
        await update.effective_message.edit_text(
            message_text, 
            reply_markup=get_favorites_navigation_buttons(), 
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await update.callback_query.answer("‚ùå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ!")  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å—Ç—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
async def next_favorite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global favorite_index
    if favorites_cache:
        if favorite_index + 1 < len(favorites_cache):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç
            favorite_index += 1
            await show_favorite(update)
        else:
            favorite_index = 0  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É –ø–æ—Å—Ç—É
            if update.callback_query:
                await update.callback_query.answer("‚ùå –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç. –ü–µ—Ä–µ—Ö–æ–∂—É –∫ –ø–µ—Ä–≤–æ–º—É –ø–æ—Å—Ç—É.")
                await update.callback_query.edit_message_text(
                    "‚ùå –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç. –ü–µ—Ä–µ—Ö–æ–∂—É –∫ –ø–µ—Ä–≤–æ–º—É –ø–æ—Å—Ç—É.",
                    reply_markup=get_favorites_navigation_buttons()
                )
            await show_favorite(update)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç
    else:
        if update.callback_query:
            await update.callback_query.answer("‚ùå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ!")
        else:
            await update.message.reply("‚ùå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ!")


# –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ—Å—Ç—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
async def previous_favorite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global favorite_index
    if favorites_cache:
        if favorite_index - 1 >= 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç
            favorite_index -= 1
            await show_favorite(update)
        else:
            favorite_index = len(favorites_cache) - 1  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ—Å—Ç—É
            if update.callback_query:
                await update.callback_query.answer("‚ùå –≠—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç. –ü–µ—Ä–µ—Ö–æ–∂—É –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ—Å—Ç—É.")
            await show_favorite(update)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
    else:
        if update.callback_query:
            await update.callback_query.answer("‚ùå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ!")
        else:
            await update.message.reply("‚ùå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ!")




# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
async def show_favorite(update: Update):
    if favorites_cache:
        post_url, post_tags = favorites_cache[favorite_index]
        
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        post_tags = post_tags.replace(",", " ").strip()
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ MarkdownV2
        escaped_tags = escape_markdown_v2(post_tags)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º –∏ –µ–≥–æ —Ç–µ–≥–∞–º–∏
        message_text = f"‚ú® {escaped_tags} \\‚ú®\n\n[–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç]({post_url})"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º
        await update.effective_message.edit_text(
            message_text, 
            reply_markup=get_favorites_navigation_buttons(), 
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await update.callback_query.answer("‚ùå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ!")  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
async def add_to_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    post = post_cache[current_post_index]
    create_favorites_table(user_id)
    post_tags = post.get("tags", "–°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç").split(" ")
    with get_db_connection(user_id) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM favorites WHERE file_url = ?", (post['file_url'],))
        if cursor.fetchone() is None:
            cursor.execute("INSERT INTO favorites (file_url, tags) VALUES (?, ?)", (post['file_url'], ", ".join(post_tags)))
            conn.commit()
            await update.callback_query.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        else:
            await update.callback_query.answer("–≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
async def remove_from_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global favorite_index
    user_id = update.effective_user.id
    post_url = favorites_cache[favorite_index][0]
    with get_db_connection(user_id) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM favorites WHERE file_url = ?", (post_url,))
        conn.commit()
    await update.callback_query.answer("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
    del favorites_cache[favorite_index]
    if favorite_index >= len(favorites_cache):
        favorite_index = max(favorite_index - 1, 0)
    if favorites_cache:
        await show_favorite(update)
    else:
        await update.callback_query.message.reply_text("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ.", reply_markup=get_main_menu())

# –û –±–æ—Ç–µ
async def about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üéâ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–∞ Rule34."
    await update.callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]))

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
async def user_agreement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:\n\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.\n"
        "2. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–∞–π–¥–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ API Rule34.\n"
    )
    await update.callback_query.message.edit_text(
        text, 
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]])
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_tag_search))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling()

if __name__ == "__main__":
    keep_alive()
    main()  # –ó–∞–ø—É—Å–∫ –±–µ–∑ asyncio.run
